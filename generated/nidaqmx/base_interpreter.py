# Do not edit this file; it was automatically generated.
from nidaqmx.constants import (
    ACExcitWireMode, AccelChargeSensitivityUnits, AccelSensitivityUnits,
    AccelUnits, AcquisitionType, AngleUnits, AngularVelocityUnits,
    BridgeConfiguration, BridgeElectricalUnits, BridgePhysicalUnits,
    BridgeUnits, CJCSource, ChargeUnits, CountDirection,
    CounterFrequencyMethod, CurrentShuntResistorLocation, CurrentUnits,
    DigitalPatternCondition, EddyCurrentProxProbeSensitivityUnits, Edge,
    EncoderType, EncoderZIndexPhase, ExcitationSource,
    ForceIEPESensorSensitivityUnits, ForceUnits, FrequencyUnits, FuncGenType,
    GpsSignalType, LVDTSensitivityUnits, LengthUnits, Level, LineGrouping,
    Polarity, PressureUnits, RTDType, RVDTSensitivityUnits,
    ResistanceConfiguration, ResistanceUnits, Signal, SignalModifiers, Slope,
    SoundPressureUnits, StrainGageBridgeType, StrainGageRosetteType,
    StrainUnits, TEDSUnits, TemperatureUnits, TerminalConfiguration,
    ThermocoupleType, TimeUnits, Timescale, TorqueUnits, UnitsPreScaled,
    VelocityIEPESensorSensitivityUnits, VelocityUnits, VoltageUnits,
    WindowTriggerCondition1, WriteBasicTEDSOptions)

class BaseInterpreter:
    """
    Contains signature of functions for all DAQmx APIs.
    """
    def add_ai_accel_4_wire_dc_voltage_chan(
            self, physical_channel, name_to_assign_to_channel="",
            terminal_config=TerminalConfiguration.DEFAULT, min_val=-5.0,
            max_val=5.0, units=AccelUnits.G, sensitivity=1000.0,
            sensitivity_units=AccelSensitivityUnits.MILLIVOLTS_PER_G,
            voltage_excit_source=ExcitationSource.INTERNAL,
            voltage_excit_val=0.0, use_excit_for_scaling=False,
            custom_scale_name=""):
        pass

    def add_ai_accel_chan(
            self, physical_channel, name_to_assign_to_channel="",
            terminal_config=TerminalConfiguration.DEFAULT, min_val=-5.0,
            max_val=5.0, units=AccelUnits.G, sensitivity=1000.0,
            sensitivity_units=AccelSensitivityUnits.MILLIVOLTS_PER_G,
            current_excit_source=ExcitationSource.INTERNAL,
            current_excit_val=0.004, custom_scale_name=""):
        pass

    def add_ai_accel_charge_chan(
            self, physical_channel, name_to_assign_to_channel="",
            terminal_config=TerminalConfiguration.DEFAULT, min_val=-5.0,
            max_val=5.0, units=AccelUnits.G, sensitivity=100.0,
            sensitivity_units=AccelChargeSensitivityUnits.PICO_COULOMBS_PER_G,
            custom_scale_name=""):
        pass

    def add_ai_bridge_chan(
            self, physical_channel, name_to_assign_to_channel="",
            min_val=-0.002, max_val=0.002, units=BridgeUnits.VOLTS_PER_VOLT,
            bridge_config=BridgeConfiguration.FULL_BRIDGE,
            voltage_excit_source=ExcitationSource.INTERNAL,
            voltage_excit_val=2.5, nominal_bridge_resistance=350.0,
            custom_scale_name=""):
        pass

    def add_ai_charge_chan(
            self, physical_channel, name_to_assign_to_channel="",
            terminal_config=TerminalConfiguration.DEFAULT,
            min_val=-0.000000001, max_val=0.000000001,
            units=ChargeUnits.COULOMBS, custom_scale_name=""):
        pass

    def add_ai_current_chan(
            self, physical_channel, name_to_assign_to_channel="",
            terminal_config=TerminalConfiguration.DEFAULT, min_val=-0.01,
            max_val=0.01, units=CurrentUnits.AMPS,
            shunt_resistor_loc=CurrentShuntResistorLocation.LET_DRIVER_CHOOSE,
            ext_shunt_resistor_val=249.0, custom_scale_name=""):
        pass

    def add_ai_current_rms_chan(
            self, physical_channel, name_to_assign_to_channel="",
            terminal_config=TerminalConfiguration.DEFAULT, min_val=-0.01,
            max_val=0.01, units=CurrentUnits.AMPS,
            shunt_resistor_loc=CurrentShuntResistorLocation.LET_DRIVER_CHOOSE,
            ext_shunt_resistor_val=249.0, custom_scale_name=""):
        pass

    def add_ai_force_bridge_polynomial_chan(
            self, physical_channel, name_to_assign_to_channel="",
            min_val=-100.0, max_val=100.0, units=ForceUnits.POUNDS,
            bridge_config=BridgeConfiguration.FULL_BRIDGE,
            voltage_excit_source=ExcitationSource.INTERNAL,
            voltage_excit_val=2.5, nominal_bridge_resistance=350.0,
            forward_coeffs=None, reverse_coeffs=None,
            electrical_units=BridgeElectricalUnits.MILLIVOLTS_PER_VOLT,
            physical_units=BridgePhysicalUnits.POUNDS, custom_scale_name=""):
        pass

    def add_ai_force_bridge_table_chan(
            self, physical_channel, name_to_assign_to_channel="",
            min_val=-100.0, max_val=100.0, units=ForceUnits.POUNDS,
            bridge_config=BridgeConfiguration.FULL_BRIDGE,
            voltage_excit_source=ExcitationSource.INTERNAL,
            voltage_excit_val=2.5, nominal_bridge_resistance=350.0,
            electrical_vals=None,
            electrical_units=BridgeElectricalUnits.MILLIVOLTS_PER_VOLT,
            physical_vals=None, physical_units=BridgePhysicalUnits.POUNDS,
            custom_scale_name=""):
        pass

    def add_ai_force_bridge_two_point_lin_chan(
            self, physical_channel, name_to_assign_to_channel="",
            min_val=-100.0, max_val=100.0, units=ForceUnits.POUNDS,
            bridge_config=BridgeConfiguration.FULL_BRIDGE,
            voltage_excit_source=ExcitationSource.INTERNAL,
            voltage_excit_val=2.5, nominal_bridge_resistance=350.0,
            first_electrical_val=0.0, second_electrical_val=2.0,
            electrical_units=BridgeElectricalUnits.MILLIVOLTS_PER_VOLT,
            first_physical_val=0.0, second_physical_val=100.0,
            physical_units=BridgePhysicalUnits.POUNDS, custom_scale_name=""):
        pass

    def add_ai_force_iepe_chan(
            self, physical_channel, name_to_assign_to_channel="",
            terminal_config=TerminalConfiguration.DEFAULT, min_val=-2000.0,
            max_val=2000.0, units=ForceUnits.NEWTONS, sensitivity=2.25,
            sensitivity_units=ForceIEPESensorSensitivityUnits.MILLIVOLTS_PER_NEWTON,
            current_excit_source=ExcitationSource.INTERNAL,
            current_excit_val=0.004, custom_scale_name=""):
        pass

    def add_ai_freq_voltage_chan(
            self, physical_channel, name_to_assign_to_channel="", min_val=1,
            max_val=100, units=FrequencyUnits.HZ, threshold_level=0.0,
            hysteresis=0.0, custom_scale_name=""):
        pass

    def add_ai_microphone_chan(
            self, physical_channel, name_to_assign_to_channel="",
            terminal_config=TerminalConfiguration.DEFAULT,
            units=SoundPressureUnits.PA, mic_sensitivity=10.0,
            max_snd_press_level=100.0,
            current_excit_source=ExcitationSource.INTERNAL,
            current_excit_val=0.004, custom_scale_name=""):
        pass

    def add_ai_pos_eddy_curr_prox_probe_chan(
            self, physical_channel, name_to_assign_to_channel="", min_val=0.0,
            max_val=0.00254, units=LengthUnits.METERS, sensitivity=200.0,
            sensitivity_units=EddyCurrentProxProbeSensitivityUnits.MILLIVOLTS_PER_MIL,
            custom_scale_name=""):
        pass

    def add_ai_pos_lvdt_chan(
            self, physical_channel, name_to_assign_to_channel="",
            min_val=-0.1, max_val=0.1, units=LengthUnits.METERS,
            sensitivity=50.0,
            sensitivity_units=LVDTSensitivityUnits.MILLIVOLTS_PER_VOLT_PER_MILLIMETER,
            voltage_excit_source=ExcitationSource.INTERNAL,
            voltage_excit_val=1.0, voltage_excit_freq=2500.0,
            ac_excit_wire_mode=ACExcitWireMode.FOUR_WIRE,
            custom_scale_name=""):
        pass

    def add_ai_pos_rvdt_chan(
            self, physical_channel, name_to_assign_to_channel="",
            min_val=-70.0, max_val=70.0, units=AngleUnits.DEGREES,
            sensitivity=50.0,
            sensitivity_units=RVDTSensitivityUnits.MILLIVOLTS_PER_VOLT_PER_DEGREE,
            voltage_excit_source=ExcitationSource.INTERNAL,
            voltage_excit_val=1.0, voltage_excit_freq=2500.0,
            ac_excit_wire_mode=ACExcitWireMode.FOUR_WIRE,
            custom_scale_name=""):
        pass

    def add_ai_power_chan(
            self, physical_channel, voltage_setpoint, current_setpoint,
            output_enable, name_to_assign_to_channel=""):
        pass

    def add_ai_pressure_bridge_polynomial_chan(
            self, physical_channel, name_to_assign_to_channel="",
            min_val=-100.0, max_val=100.0,
            units=PressureUnits.POUNDS_PER_SQ_INCH,
            bridge_config=BridgeConfiguration.FULL_BRIDGE,
            voltage_excit_source=ExcitationSource.INTERNAL,
            voltage_excit_val=2.5, nominal_bridge_resistance=350.0,
            forward_coeffs=None, reverse_coeffs=None,
            electrical_units=BridgeElectricalUnits.MILLIVOLTS_PER_VOLT,
            physical_units=BridgePhysicalUnits.POUNDS_PER_SQ_INCH,
            custom_scale_name=""):
        pass

    def add_ai_pressure_bridge_table_chan(
            self, physical_channel, name_to_assign_to_channel="",
            min_val=-100.0, max_val=100.0,
            units=PressureUnits.POUNDS_PER_SQ_INCH,
            bridge_config=BridgeConfiguration.FULL_BRIDGE,
            voltage_excit_source=ExcitationSource.INTERNAL,
            voltage_excit_val=2.5, nominal_bridge_resistance=350.0,
            electrical_vals=None,
            electrical_units=BridgeElectricalUnits.MILLIVOLTS_PER_VOLT,
            physical_vals=None,
            physical_units=BridgePhysicalUnits.POUNDS_PER_SQ_INCH,
            custom_scale_name=""):
        pass

    def add_ai_pressure_bridge_two_point_lin_chan(
            self, physical_channel, name_to_assign_to_channel="",
            min_val=-100.0, max_val=100.0,
            units=PressureUnits.POUNDS_PER_SQ_INCH,
            bridge_config=BridgeConfiguration.FULL_BRIDGE,
            voltage_excit_source=ExcitationSource.INTERNAL,
            voltage_excit_val=2.5, nominal_bridge_resistance=350.0,
            first_electrical_val=0.0, second_electrical_val=2.0,
            electrical_units=BridgeElectricalUnits.MILLIVOLTS_PER_VOLT,
            first_physical_val=0.0, second_physical_val=100.0,
            physical_units=BridgePhysicalUnits.POUNDS_PER_SQ_INCH,
            custom_scale_name=""):
        pass

    def add_ai_resistance_chan(
            self, physical_channel, name_to_assign_to_channel="",
            min_val=100.0, max_val=1000.0, units=ResistanceUnits.OHMS,
            resistance_config=ResistanceConfiguration.TWO_WIRE,
            current_excit_source=ExcitationSource.EXTERNAL,
            current_excit_val=0.001, custom_scale_name=""):
        pass

    def add_ai_rosette_strain_gage_chan(
            self, physical_channel, rosette_type, gage_orientation,
            rosette_meas_types, name_to_assign_to_channel="", min_val=-0.001,
            max_val=0.001,
            strain_config=StrainGageBridgeType.QUARTER_BRIDGE_I,
            voltage_excit_source=ExcitationSource.INTERNAL,
            voltage_excit_val=2.5, gage_factor=2.0,
            nominal_gage_resistance=350.0, poisson_ratio=0.3,
            lead_wire_resistance=0.0):
        pass

    def add_ai_rtd_chan(
            self, physical_channel, name_to_assign_to_channel="", min_val=0.0,
            max_val=100.0, units=TemperatureUnits.DEG_C,
            rtd_type=RTDType.PT_3750,
            resistance_config=ResistanceConfiguration.TWO_WIRE,
            current_excit_source=ExcitationSource.EXTERNAL,
            current_excit_val=0.0025, r_0=100.0):
        pass

    def add_ai_strain_gage_chan(
            self, physical_channel, name_to_assign_to_channel="",
            min_val=-0.001, max_val=0.001, units=StrainUnits.STRAIN,
            strain_config=StrainGageBridgeType.FULL_BRIDGE_I,
            voltage_excit_source=ExcitationSource.INTERNAL,
            voltage_excit_val=2.5, gage_factor=2.0,
            initial_bridge_voltage=0.0, nominal_gage_resistance=350.0,
            poisson_ratio=0.30, lead_wire_resistance=0.0,
            custom_scale_name=""):
        pass

    def add_ai_temp_built_in_sensor_chan(
            self, physical_channel, name_to_assign_to_channel="",
            units=TemperatureUnits.DEG_C):
        pass

    def add_ai_thrmcpl_chan(
            self, physical_channel, name_to_assign_to_channel="", min_val=0.0,
            max_val=100.0, units=TemperatureUnits.DEG_C,
            thermocouple_type=ThermocoupleType.J,
            cjc_source=CJCSource.CONSTANT_USER_VALUE, cjc_val=25.0,
            cjc_channel=""):
        pass

    def add_ai_thrmstr_chan_iex(
            self, physical_channel, name_to_assign_to_channel="", min_val=0.0,
            max_val=100.0, units=TemperatureUnits.DEG_C,
            resistance_config=ResistanceConfiguration.FOUR_WIRE,
            current_excit_source=ExcitationSource.EXTERNAL,
            current_excit_val=0.00015, a=0.001295361, b=0.0002343159,
            c=0.0000001018703):
        pass

    def add_ai_thrmstr_chan_vex(
            self, physical_channel, name_to_assign_to_channel="", min_val=0.0,
            max_val=100.0, units=TemperatureUnits.DEG_C,
            resistance_config=ResistanceConfiguration.FOUR_WIRE,
            voltage_excit_source=ExcitationSource.EXTERNAL,
            voltage_excit_val=2.5, a=0.001295361, b=0.0002343159,
            c=0.0000001018703, r_1=5000.0):
        pass

    def add_ai_torque_bridge_polynomial_chan(
            self, physical_channel, name_to_assign_to_channel="",
            min_val=-100.0, max_val=100.0, units=TorqueUnits.INCH_POUNDS,
            bridge_config=BridgeConfiguration.FULL_BRIDGE,
            voltage_excit_source=ExcitationSource.INTERNAL,
            voltage_excit_val=2.5, nominal_bridge_resistance=350.0,
            forward_coeffs=None, reverse_coeffs=None,
            electrical_units=BridgeElectricalUnits.MILLIVOLTS_PER_VOLT,
            physical_units=BridgePhysicalUnits.INCH_POUNDS,
            custom_scale_name=""):
        pass

    def add_ai_torque_bridge_table_chan(
            self, physical_channel, name_to_assign_to_channel="",
            min_val=-100.0, max_val=100.0, units=TorqueUnits.INCH_POUNDS,
            bridge_config=BridgeConfiguration.FULL_BRIDGE,
            voltage_excit_source=ExcitationSource.INTERNAL,
            voltage_excit_val=2.5, nominal_bridge_resistance=350.0,
            electrical_vals=None,
            electrical_units=BridgeElectricalUnits.MILLIVOLTS_PER_VOLT,
            physical_vals=None,
            physical_units=BridgePhysicalUnits.INCH_POUNDS,
            custom_scale_name=""):
        pass

    def add_ai_torque_bridge_two_point_lin_chan(
            self, physical_channel, name_to_assign_to_channel="",
            min_val=-100.0, max_val=100.0, units=TorqueUnits.INCH_POUNDS,
            bridge_config=BridgeConfiguration.FULL_BRIDGE,
            voltage_excit_source=ExcitationSource.INTERNAL,
            voltage_excit_val=2.5, nominal_bridge_resistance=350.0,
            first_electrical_val=0.0, second_electrical_val=2.0,
            electrical_units=BridgeElectricalUnits.MILLIVOLTS_PER_VOLT,
            first_physical_val=0.0, second_physical_val=100.0,
            physical_units=BridgePhysicalUnits.INCH_POUNDS,
            custom_scale_name=""):
        pass

    def add_ai_velocity_iepe_chan(
            self, physical_channel, name_to_assign_to_channel="",
            terminal_config=TerminalConfiguration.DEFAULT, min_val=-50.0,
            max_val=50.0, units=VelocityUnits.INCHES_PER_SECOND,
            sensitivity=100.0,
            sensitivity_units=VelocityIEPESensorSensitivityUnits.MILLIVOLTS_PER_INCH_PER_SECOND,
            current_excit_source=ExcitationSource.INTERNAL,
            current_excit_val=0.002, custom_scale_name=""):
        pass

    def add_ai_voltage_chan(
            self, physical_channel, name_to_assign_to_channel="",
            terminal_config=TerminalConfiguration.DEFAULT, min_val=-5.0,
            max_val=5.0, units=VoltageUnits.VOLTS, custom_scale_name=""):
        pass

    def add_ai_voltage_chan_with_excit(
            self, physical_channel, name_to_assign_to_channel="",
            terminal_config=TerminalConfiguration.DEFAULT, min_val=-10.0,
            max_val=10.0, units=VoltageUnits.VOLTS,
            bridge_config=BridgeConfiguration.NO_BRIDGE,
            voltage_excit_source=ExcitationSource.INTERNAL,
            voltage_excit_val=0.0, use_excit_for_scaling=False,
            custom_scale_name=""):
        pass

    def add_ai_voltage_rms_chan(
            self, physical_channel, name_to_assign_to_channel="",
            terminal_config=TerminalConfiguration.DEFAULT, min_val=-5.0,
            max_val=5.0, units=VoltageUnits.VOLTS, custom_scale_name=""):
        pass

    def add_ao_current_chan(
            self, physical_channel, name_to_assign_to_channel="", min_val=0.0,
            max_val=0.02, units=CurrentUnits.AMPS, custom_scale_name=""):
        pass

    def add_ao_func_gen_chan(
            self, physical_channel, name_to_assign_to_channel="",
            type=FuncGenType.SINE, freq=1000.0, amplitude=5.0, offset=0.0):
        pass

    def add_ao_voltage_chan(
            self, physical_channel, name_to_assign_to_channel="",
            min_val=-10.0, max_val=10.0, units=VoltageUnits.VOLTS,
            custom_scale_name=""):
        pass

    def add_cdaq_sync_connection(self):
        pass

    def add_ci_ang_encoder_chan(
            self, counter, name_to_assign_to_channel="",
            decoding_type=EncoderType.X_4, zidx_enable=False, zidx_val=0,
            zidx_phase=EncoderZIndexPhase.AHIGH_BHIGH,
            units=AngleUnits.DEGREES, pulses_per_rev=24, initial_angle=0.0,
            custom_scale_name=""):
        pass

    def add_ci_ang_velocity_chan(
            self, counter, name_to_assign_to_channel="", min_val=0.0,
            max_val=1.0, decoding_type=EncoderType.X_4,
            units=AngularVelocityUnits.RPM, pulses_per_rev=24,
            custom_scale_name=""):
        pass

    def add_ci_count_edges_chan(
            self, counter, name_to_assign_to_channel="", edge=Edge.RISING,
            initial_count=0, count_direction=CountDirection.COUNT_UP):
        pass

    def add_ci_duty_cycle_chan(
            self, counter, name_to_assign_to_channel="", min_freq=2.0,
            max_freq=10000.0, edge=Edge.RISING, custom_scale_name=""):
        pass

    def add_ci_freq_chan(
            self, counter, name_to_assign_to_channel="", min_val=2.0,
            max_val=100.0, units=FrequencyUnits.HZ, edge=Edge.RISING,
            meas_method=CounterFrequencyMethod.LOW_FREQUENCY_1_COUNTER,
            meas_time=0.001, divisor=4, custom_scale_name=""):
        pass

    def add_ci_gps_timestamp_chan(
            self, counter, name_to_assign_to_channel="",
            units=TimeUnits.SECONDS, sync_method=GpsSignalType.IRIGB,
            custom_scale_name=""):
        pass

    def add_ci_lin_encoder_chan(
            self, counter, name_to_assign_to_channel="",
            decoding_type=EncoderType.X_4, zidx_enable=False, zidx_val=0,
            zidx_phase=EncoderZIndexPhase.AHIGH_BHIGH,
            units=LengthUnits.METERS, dist_per_pulse=0.001, initial_pos=0.0,
            custom_scale_name=""):
        pass

    def add_ci_lin_velocity_chan(
            self, counter, name_to_assign_to_channel="", min_val=0.0,
            max_val=1.0, decoding_type=EncoderType.X_4,
            units=VelocityUnits.METERS_PER_SECOND, dist_per_pulse=0.001,
            custom_scale_name=""):
        pass

    def add_ci_period_chan(
            self, counter, name_to_assign_to_channel="", min_val=0.000001,
            max_val=0.1, units=TimeUnits.SECONDS, edge=Edge.RISING,
            meas_method=CounterFrequencyMethod.LOW_FREQUENCY_1_COUNTER,
            meas_time=0.001, divisor=4, custom_scale_name=""):
        pass

    def add_ci_pulse_chan_freq(
            self, counter, name_to_assign_to_channel="", min_val=1000,
            max_val=1000000, units=FrequencyUnits.HZ):
        pass

    def add_ci_pulse_chan_ticks(
            self, counter, name_to_assign_to_channel="",
            source_terminal="OnboardClock", min_val=1000, max_val=1000000):
        pass

    def add_ci_pulse_chan_time(
            self, counter, name_to_assign_to_channel="", min_val=0.000001,
            max_val=0.001, units=TimeUnits.SECONDS):
        pass

    def add_ci_pulse_width_chan(
            self, counter, name_to_assign_to_channel="", min_val=0.000001,
            max_val=0.1, units=TimeUnits.SECONDS, starting_edge=Edge.RISING,
            custom_scale_name=""):
        pass

    def add_ci_semi_period_chan(
            self, counter, name_to_assign_to_channel="", min_val=0.000001,
            max_val=0.1, units=TimeUnits.SECONDS, custom_scale_name=""):
        pass

    def add_ci_two_edge_sep_chan(
            self, counter, name_to_assign_to_channel="", min_val=0.000001,
            max_val=1.0, units=TimeUnits.SECONDS, first_edge=Edge.RISING,
            second_edge=Edge.FALLING, custom_scale_name=""):
        pass

    def add_co_pulse_chan_freq(
            self, counter, name_to_assign_to_channel="",
            units=FrequencyUnits.HZ, idle_state=Level.LOW, initial_delay=0.0,
            freq=1.0, duty_cycle=0.5):
        pass

    def add_co_pulse_chan_ticks(
            self, counter, source_terminal, name_to_assign_to_channel="",
            idle_state=Level.LOW, initial_delay=0, low_ticks=100,
            high_ticks=100):
        pass

    def add_co_pulse_chan_time(
            self, counter, name_to_assign_to_channel="",
            units=TimeUnits.SECONDS, idle_state=Level.LOW, initial_delay=0.0,
            low_time=0.01, high_time=0.01):
        pass

    def add_di_chan(
            self, lines, name_to_assign_to_lines="",
            line_grouping=LineGrouping.CHAN_FOR_ALL_LINES):
        pass

    def add_do_chan(
            self, lines, name_to_assign_to_lines="",
            line_grouping=LineGrouping.CHAN_FOR_ALL_LINES):
        pass

    def add_global_chans_to_task(self):
        pass

    @staticmethod
    def add_lin_scale(
            self, name, slope, y_intercept=0.0,
            pre_scaled_units=UnitsPreScaled.VOLTS, scaled_units=None):
        pass

    @staticmethod
    def add_map_scale(
            self, name, prescaled_min, prescaled_max, scaled_min, scaled_max,
            pre_scaled_units=UnitsPreScaled.VOLTS, scaled_units=None):
        pass

    @staticmethod
    def add_network_device(self):
        pass

    @staticmethod
    def add_polynomial_scale(
            self, name, forward_coeffs, reverse_coeffs,
            pre_scaled_units=UnitsPreScaled.VOLTS, scaled_units=None):
        pass

    @staticmethod
    def add_table_scale(
            self, name, prescaled_vals, scaled_vals,
            pre_scaled_units=UnitsPreScaled.VOLTS, scaled_units=None):
        pass

    @staticmethod
    def add_task(self):
        pass

    def add_teds_ai_accel_chan(
            self, physical_channel, name_to_assign_to_channel="",
            terminal_config=TerminalConfiguration.DEFAULT, min_val=-5.0,
            max_val=5.0, units=AccelUnits.G,
            current_excit_source=ExcitationSource.INTERNAL,
            current_excit_val=0.004, custom_scale_name=""):
        pass

    def add_teds_ai_bridge_chan(
            self, physical_channel, name_to_assign_to_channel="",
            min_val=-0.002, max_val=0.002, units=TEDSUnits.FROM_TEDS,
            voltage_excit_source=ExcitationSource.INTERNAL,
            voltage_excit_val=2.5, custom_scale_name=""):
        pass

    def add_teds_ai_current_chan(
            self, physical_channel, name_to_assign_to_channel="",
            terminal_config=TerminalConfiguration.DEFAULT, min_val=-0.01,
            max_val=0.01, units=TEDSUnits.FROM_TEDS,
            shunt_resistor_loc=CurrentShuntResistorLocation.LET_DRIVER_CHOOSE,
            ext_shunt_resistor_val=249.0, custom_scale_name=""):
        pass

    def add_teds_ai_force_bridge_chan(
            self, physical_channel, name_to_assign_to_channel="",
            min_val=-100.0, max_val=100.0, units=ForceUnits.POUNDS,
            voltage_excit_source=ExcitationSource.INTERNAL,
            voltage_excit_val=2.5, custom_scale_name=""):
        pass

    def add_teds_ai_force_iepe_chan(
            self, physical_channel, name_to_assign_to_channel="",
            terminal_config=TerminalConfiguration.DEFAULT, min_val=-2000.0,
            max_val=2000.0, units=ForceUnits.NEWTONS,
            current_excit_source=ExcitationSource.INTERNAL,
            current_excit_val=0.001, custom_scale_name=""):
        pass

    def add_teds_ai_microphone_chan(
            self, physical_channel, name_to_assign_to_channel="",
            terminal_config=TerminalConfiguration.DEFAULT,
            units=SoundPressureUnits.PA, max_snd_press_level=100.0,
            current_excit_source=ExcitationSource.INTERNAL,
            current_excit_val=0.004, custom_scale_name=""):
        pass

    def add_teds_ai_pos_lvdt_chan(
            self, physical_channel, name_to_assign_to_channel="",
            min_val=-0.1, max_val=0.1, units=LengthUnits.METERS,
            voltage_excit_source=ExcitationSource.INTERNAL,
            voltage_excit_val=1.0, voltage_excit_freq=2500.0,
            ac_excit_wire_mode=ACExcitWireMode.FOUR_WIRE,
            custom_scale_name=""):
        pass

    def add_teds_ai_pos_rvdt_chan(
            self, physical_channel, name_to_assign_to_channel="",
            min_val=-70.0, max_val=70.0, units=AngleUnits.DEGREES,
            voltage_excit_source=ExcitationSource.INTERNAL,
            voltage_excit_val=1.0, voltage_excit_freq=2500.0,
            ac_excit_wire_mode=ACExcitWireMode.FOUR_WIRE,
            custom_scale_name=""):
        pass

    def add_teds_ai_pressure_bridge_chan(
            self, physical_channel, name_to_assign_to_channel="",
            min_val=-100.0, max_val=100.0,
            units=PressureUnits.POUNDS_PER_SQ_INCH,
            voltage_excit_source=ExcitationSource.INTERNAL,
            voltage_excit_val=2.5, custom_scale_name=""):
        pass

    def add_teds_ai_resistance_chan(
            self, physical_channel, name_to_assign_to_channel="",
            min_val=100.0, max_val=1000.0, units=TEDSUnits.FROM_TEDS,
            resistance_config=ResistanceConfiguration.TWO_WIRE,
            current_excit_source=ExcitationSource.EXTERNAL,
            current_excit_val=0.001, custom_scale_name=""):
        pass

    def add_teds_ai_rtd_chan(
            self, physical_channel, name_to_assign_to_channel="", min_val=0.0,
            max_val=100.0, units=TemperatureUnits.DEG_C,
            resistance_config=ResistanceConfiguration.TWO_WIRE,
            current_excit_source=ExcitationSource.EXTERNAL,
            current_excit_val=0.0025):
        pass

    def add_teds_ai_strain_gage_chan(
            self, physical_channel, name_to_assign_to_channel="",
            min_val=-0.001, max_val=0.001, units=StrainUnits.STRAIN,
            voltage_excit_source=ExcitationSource.INTERNAL,
            voltage_excit_val=2.5, initial_bridge_voltage=0.0,
            lead_wire_resistance=0.0, custom_scale_name=""):
        pass

    def add_teds_ai_thrmcpl_chan(
            self, physical_channel, name_to_assign_to_channel="", min_val=0.0,
            max_val=100.0, units=TemperatureUnits.DEG_C,
            cjc_source=CJCSource.CONSTANT_USER_VALUE, cjc_val=25.0,
            cjc_channel=""):
        pass

    def add_teds_ai_thrmstr_chan_iex(
            self, physical_channel, name_to_assign_to_channel="", min_val=0.0,
            max_val=100.0, units=TemperatureUnits.DEG_C,
            resistance_config=ResistanceConfiguration.FOUR_WIRE,
            current_excit_source=ExcitationSource.EXTERNAL,
            current_excit_val=0.00015):
        pass

    def add_teds_ai_thrmstr_chan_vex(
            self, physical_channel, name_to_assign_to_channel="", min_val=0.0,
            max_val=100.0, units=TemperatureUnits.DEG_C,
            resistance_config=ResistanceConfiguration.FOUR_WIRE,
            voltage_excit_source=ExcitationSource.EXTERNAL,
            voltage_excit_val=2.5, r_1=5000.0):
        pass

    def add_teds_ai_torque_bridge_chan(
            self, physical_channel, name_to_assign_to_channel="",
            min_val=-100.0, max_val=100.0, units=TorqueUnits.INCH_POUNDS,
            voltage_excit_source=ExcitationSource.INTERNAL,
            voltage_excit_val=2.5, custom_scale_name=""):
        pass

    def add_teds_ai_voltage_chan(
            self, physical_channel, name_to_assign_to_channel="",
            terminal_config=TerminalConfiguration.DEFAULT, min_val=-5.0,
            max_val=5.0, units=TEDSUnits.FROM_TEDS, custom_scale_name=""):
        pass

    def add_teds_ai_voltage_chan_with_excit(
            self, physical_channel, name_to_assign_to_channel="",
            terminal_config=TerminalConfiguration.DEFAULT, min_val=-10.0,
            max_val=10.0, units=TEDSUnits.FROM_TEDS,
            voltage_excit_source=ExcitationSource.INTERNAL,
            voltage_excit_val=0.0, custom_scale_name=""):
        pass

    @staticmethod
    def add_watchdog_timer_task(self):
        pass

    def add_watchdog_timer_task_ex(self):
        pass

    def are_configured_cdaq_sync_ports_disconnected(self):
        pass

    def auto_configure_cdaq_sync_connections(self):
        pass

    def calculate_reverse_poly_coeff(
            self, forward_coeffs, reverse_coeffs, min_val_x=-5.0,
            max_val_x=5.0, num_points_to_compute=1000, reverse_poly_order=-1):
        pass

    def cfg_anlg_edge_ref_trig(
            self, trigger_source, pretrigger_samples,
            trigger_slope=Slope.RISING, trigger_level=0.0):
        pass

    def cfg_anlg_edge_start_trig(
            self, trigger_source="", trigger_slope=Slope.RISING,
            trigger_level=0.0):
        pass

    def cfg_anlg_multi_edge_ref_trig(self):
        pass

    def cfg_anlg_multi_edge_start_trig(self):
        pass

    def cfg_anlg_window_ref_trig(
            self, trigger_source, window_top, window_bottom,
            pretrigger_samples,
            trigger_when=WindowTriggerCondition1.ENTERING_WINDOW):
        pass

    def cfg_anlg_window_start_trig(
            self, window_top, window_bottom, trigger_source="",
            trigger_when=WindowTriggerCondition1.ENTERING_WINDOW):
        pass

    def cfg_burst_handshaking_timing_export_clock(
            self, sample_clk_rate, sample_clk_outp_term,
            sample_mode=AcquisitionType.FINITE, samps_per_chan=1000,
            sample_clk_pulse_polarity=Polarity.ACTIVE_HIGH,
            pause_when=Level.HIGH,
            ready_event_active_level=Polarity.ACTIVE_HIGH):
        pass

    def cfg_burst_handshaking_timing_import_clock(
            self, sample_clk_rate, sample_clk_src,
            sample_mode=AcquisitionType.FINITE, samps_per_chan=1000,
            sample_clk_active_edge=Edge.RISING, pause_when=Level.HIGH,
            ready_event_active_level=Polarity.ACTIVE_HIGH):
        pass

    def cfg_change_detection_timing(
            self, rising_edge_chan="", falling_edge_chan="",
            sample_mode=AcquisitionType.FINITE, samps_per_chan=1000):
        pass

    def cfg_dig_edge_ref_trig(
            self, trigger_source, pretrigger_samples,
            trigger_edge=Edge.RISING):
        pass

    def cfg_dig_edge_start_trig(
            self, trigger_source, trigger_edge=Edge.RISING):
        pass

    def cfg_dig_pattern_ref_trig(
            self, trigger_source, trigger_pattern, pretrigger_samples,
            trigger_when=DigitalPatternCondition.PATTERN_MATCHES):
        pass

    def cfg_dig_pattern_start_trig(
            self, trigger_source, trigger_pattern,
            trigger_when=DigitalPatternCondition.PATTERN_MATCHES):
        pass

    def cfg_handshaking_timing(
            self, sample_mode=AcquisitionType.FINITE, samps_per_chan=1000):
        pass

    def cfg_implicit_timing(
            self, sample_mode=AcquisitionType.FINITE, samps_per_chan=1000):
        pass

    def cfg_input_buffer(self):
        pass

    def cfg_output_buffer(self):
        pass

    def cfg_pipelined_samp_clk_timing(
            self, rate, source="", active_edge=Edge.RISING,
            sample_mode=AcquisitionType.FINITE, samps_per_chan=1000):
        pass

    def cfg_samp_clk_timing(
            self, rate, source="", active_edge=Edge.RISING,
            sample_mode=AcquisitionType.FINITE, samps_per_chan=1000):
        pass

    def cfg_time_start_trig(self, when, timescale=Timescale.USE_HOST):
        pass

    def cfg_watchdog_ao_expir_states(self):
        pass

    def cfg_watchdog_co_expir_states(self):
        pass

    def cfg_watchdog_do_expir_states(self):
        pass

    def clear_task(self):
        pass

    def clear_teds(self, physical_channel):
        pass

    def configure_logging(self):
        pass

    def configure_teds(self, physical_channel="", file_path=""):
        pass

    def connect_terms(
            self, source_terminal, destination_terminal,
            signal_modifiers=SignalModifiers.DO_NOT_INVERT_POLARITY):
        pass

    def control_watchdog_task(self):
        pass

    def delete_network_device(self):
        pass

    def delete_saved_global_chan(self):
        pass

    def delete_saved_scale(self):
        pass

    def delete_saved_task(self):
        pass

    def device_supports_cal(self):
        pass

    def disable_ref_trig(self):
        pass

    def disable_start_trig(self):
        pass

    def disconnect_terms(self, source_terminal, destination_terminal):
        pass

    def export_signal(self, signal_id, output_terminal):
        pass

    def get_ai_chan_cal_cal_date(self):
        pass

    def get_ai_chan_cal_exp_date(self):
        pass

    def get_analog_power_up_states(self):
        pass

    def get_analog_power_up_states_with_output_type(self):
        pass

    def get_arm_start_trig_timestamp_val(self):
        pass

    def get_arm_start_trig_trig_when(self):
        pass

    def get_auto_configured_cdaq_sync_connections(self):
        pass

    def get_buffer_attribute_u_int_32(self):
        pass

    def get_cal_info_attribute_bool(self):
        pass

    def get_cal_info_attribute_double(self):
        pass

    def get_cal_info_attribute_string(self):
        pass

    def get_cal_info_attribute_u_int_32(self):
        pass

    def get_chan_attribute_bool(self):
        pass

    def get_chan_attribute_double(self):
        pass

    def get_chan_attribute_double_array(self):
        pass

    def get_chan_attribute_int_32(self):
        pass

    def get_chan_attribute_string(self):
        pass

    def get_chan_attribute_u_int_32(self):
        pass

    def get_device_attribute_bool(self):
        pass

    def get_device_attribute_double(self):
        pass

    def get_device_attribute_double_array(self):
        pass

    def get_device_attribute_int_32(self):
        pass

    def get_device_attribute_int_32_array(self):
        pass

    def get_device_attribute_string(self):
        pass

    def get_device_attribute_u_int_32(self):
        pass

    def get_device_attribute_u_int_32_array(self):
        pass

    def get_digital_logic_family_power_up_state(self):
        pass

    def get_digital_power_up_states(self):
        pass

    def get_digital_pull_up_pull_down_states(self):
        pass

    def get_disconnected_cdaq_sync_ports(self):
        pass

    def get_error_string(self):
        pass

    def get_exported_signal_attribute_bool(self):
        pass

    def get_exported_signal_attribute_double(self):
        pass

    def get_exported_signal_attribute_int_32(self):
        pass

    def get_exported_signal_attribute_string(self):
        pass

    def get_exported_signal_attribute_u_int_32(self):
        pass

    def get_extended_error_info(self):
        pass

    def get_first_samp_clk_when(self):
        pass

    def get_first_samp_timestamp_val(self):
        pass

    def get_nth_task_channel(self):
        pass

    def get_nth_task_device(self):
        pass

    def get_nth_task_read_channel(self):
        pass

    def get_persisted_chan_attribute_bool(self):
        pass

    def get_persisted_chan_attribute_string(self):
        pass

    def get_persisted_scale_attribute_bool(self):
        pass

    def get_persisted_scale_attribute_string(self):
        pass

    def get_persisted_task_attribute_bool(self):
        pass

    def get_persisted_task_attribute_string(self):
        pass

    def get_physical_chan_attribute_bool(self):
        pass

    def get_physical_chan_attribute_bytes(self):
        pass

    def get_physical_chan_attribute_double(self):
        pass

    def get_physical_chan_attribute_double_array(self):
        pass

    def get_physical_chan_attribute_int_32(self):
        pass

    def get_physical_chan_attribute_int_32_array(self):
        pass

    def get_physical_chan_attribute_string(self):
        pass

    def get_physical_chan_attribute_u_int_32(self):
        pass

    def get_physical_chan_attribute_u_int_32_array(self):
        pass

    def get_read_attribute_bool(self):
        pass

    def get_read_attribute_double(self):
        pass

    def get_read_attribute_int_32(self):
        pass

    def get_read_attribute_string(self):
        pass

    def get_read_attribute_u_int_32(self):
        pass

    def get_read_attribute_u_int_64(self):
        pass

    def get_real_time_attribute_bool(self):
        pass

    def get_real_time_attribute_int_32(self):
        pass

    def get_real_time_attribute_u_int_32(self):
        pass

    def get_ref_trig_timestamp_val(self):
        pass

    def get_scale_attribute_double(self):
        pass

    def get_scale_attribute_double_array(self):
        pass

    def get_scale_attribute_int_32(self):
        pass

    def get_scale_attribute_string(self):
        pass

    def get_self_cal_last_date_and_time(self):
        pass

    def get_start_trig_timestamp_val(self):
        pass

    def get_start_trig_trig_when(self):
        pass

    def get_sync_pulse_time_when(self):
        pass

    def get_system_info_attribute_string(self):
        pass

    def get_system_info_attribute_u_int_32(self):
        pass

    def get_task_attribute_bool(self):
        pass

    def get_task_attribute_string(self):
        pass

    def get_task_attribute_u_int_32(self):
        pass

    def get_timing_attribute_bool(self):
        pass

    def get_timing_attribute_double(self):
        pass

    def get_timing_attribute_ex_bool(self):
        pass

    def get_timing_attribute_ex_double(self):
        pass

    def get_timing_attribute_ex_int_32(self):
        pass

    def get_timing_attribute_ex_string(self):
        pass

    def get_timing_attribute_ex_timestamp(self):
        pass

    def get_timing_attribute_ex_u_int_32(self):
        pass

    def get_timing_attribute_ex_u_int_64(self):
        pass

    def get_timing_attribute_int_32(self):
        pass

    def get_timing_attribute_string(self):
        pass

    def get_timing_attribute_timestamp(self):
        pass

    def get_timing_attribute_u_int_32(self):
        pass

    def get_timing_attribute_u_int_64(self):
        pass

    def get_trig_attribute_bool(self):
        pass

    def get_trig_attribute_double(self):
        pass

    def get_trig_attribute_double_array(self):
        pass

    def get_trig_attribute_int_32(self):
        pass

    def get_trig_attribute_int_32_array(self):
        pass

    def get_trig_attribute_string(self):
        pass

    def get_trig_attribute_timestamp(self):
        pass

    def get_trig_attribute_u_int_32(self):
        pass

    def get_watchdog_attribute_bool(self):
        pass

    def get_watchdog_attribute_double(self):
        pass

    def get_watchdog_attribute_int_32(self):
        pass

    def get_watchdog_attribute_string(self):
        pass

    def get_write_attribute_bool(self):
        pass

    def get_write_attribute_double(self):
        pass

    def get_write_attribute_int_32(self):
        pass

    def get_write_attribute_string(self):
        pass

    def get_write_attribute_u_int_32(self):
        pass

    def get_write_attribute_u_int_64(self):
        pass

    def is_task_done(self):
        pass

    def load_task(self):
        pass

    def read_analog_f_64(self):
        pass

    def read_analog_scalar_f_64(self):
        pass

    def read_binary_i_16(self):
        pass

    def read_binary_i_32(self):
        pass

    def read_binary_u_16(self):
        pass

    def read_binary_u_32(self):
        pass

    def read_counter_f_64(self):
        pass

    def read_counter_f_64_ex(self):
        pass

    def read_counter_scalar_f_64(self):
        pass

    def read_counter_scalar_u_32(self):
        pass

    def read_counter_u_32(self):
        pass

    def read_counter_u_32_ex(self):
        pass

    def read_ctr_freq(self):
        pass

    def read_ctr_freq_scalar(self):
        pass

    def read_ctr_ticks(self):
        pass

    def read_ctr_ticks_scalar(self):
        pass

    def read_ctr_time(self):
        pass

    def read_ctr_time_scalar(self):
        pass

    def read_digital_lines(self):
        pass

    def read_digital_scalar_u_32(self):
        pass

    def read_digital_u_16(self):
        pass

    def read_digital_u_32(self):
        pass

    def read_digital_u_8(self):
        pass

    def read_power_binary_i_16(self):
        pass

    def read_power_f_64(self):
        pass

    def read_power_scalar_f_64(self):
        pass

    def read_raw(self):
        pass

    def register_done_event(self):
        pass

    def register_every_n_samples_event(self):
        pass

    def register_signal_event(self):
        pass

    def remove_cdaq_sync_connection(self):
        pass

    def reserve_network_device(self):
        pass

    def reset_buffer_attribute(self):
        pass

    def reset_chan_attribute(self):
        pass

    def reset_device(self, device_name):
        pass

    def reset_exported_signal_attribute(self, attribute):
        pass

    def reset_read_attribute(self):
        pass

    def reset_real_time_attribute(self):
        pass

    def reset_timing_attribute(self, attribute):
        pass

    def reset_timing_attribute_ex(self, device_names, attribute):
        pass

    def reset_trig_attribute(self, attribute):
        pass

    def reset_watchdog_attribute(self):
        pass

    def reset_write_attribute(self):
        pass

    def save_global_chan(self):
        pass

    def save_scale(self):
        pass

    def save_task(self):
        pass

    def self_cal(self):
        pass

    def self_test_device(self, device_name):
        pass

    def set_ai_chan_cal_cal_date(self):
        pass

    def set_ai_chan_cal_exp_date(self):
        pass

    def set_analog_power_up_states(self):
        pass

    def set_analog_power_up_states_with_output_type(self):
        pass

    def set_arm_start_trig_trig_when(self):
        pass

    def set_buffer_attribute_u_int_32(self):
        pass

    def set_cal_info_attribute_bool(self):
        pass

    def set_cal_info_attribute_double(self):
        pass

    def set_cal_info_attribute_string(self):
        pass

    def set_cal_info_attribute_u_int_32(self):
        pass

    def set_chan_attribute_bool(self):
        pass

    def set_chan_attribute_double(self):
        pass

    def set_chan_attribute_double_array(self):
        pass

    def set_chan_attribute_int_32(self):
        pass

    def set_chan_attribute_string(self):
        pass

    def set_chan_attribute_u_int_32(self):
        pass

    def set_digital_logic_family_power_up_state(self):
        pass

    def set_digital_power_up_states(self):
        pass

    def set_digital_pull_up_pull_down_states(self):
        pass

    def set_exported_signal_attribute_bool(self):
        pass

    def set_exported_signal_attribute_double(self):
        pass

    def set_exported_signal_attribute_int_32(self):
        pass

    def set_exported_signal_attribute_string(self):
        pass

    def set_exported_signal_attribute_u_int_32(self):
        pass

    def set_first_samp_clk_when(self):
        pass

    def set_read_attribute_bool(self):
        pass

    def set_read_attribute_double(self):
        pass

    def set_read_attribute_int_32(self):
        pass

    def set_read_attribute_string(self):
        pass

    def set_read_attribute_u_int_32(self):
        pass

    def set_read_attribute_u_int_64(self):
        pass

    def set_real_time_attribute_bool(self):
        pass

    def set_real_time_attribute_int_32(self):
        pass

    def set_real_time_attribute_u_int_32(self):
        pass

    def set_scale_attribute_double(self):
        pass

    def set_scale_attribute_double_array(self):
        pass

    def set_scale_attribute_int_32(self):
        pass

    def set_scale_attribute_string(self):
        pass

    def set_start_trig_trig_when(self):
        pass

    def set_sync_pulse_time_when(self):
        pass

    def set_timing_attribute_bool(self):
        pass

    def set_timing_attribute_double(self):
        pass

    def set_timing_attribute_ex_bool(self):
        pass

    def set_timing_attribute_ex_double(self):
        pass

    def set_timing_attribute_ex_int_32(self):
        pass

    def set_timing_attribute_ex_string(self):
        pass

    def set_timing_attribute_ex_timestamp(self):
        pass

    def set_timing_attribute_ex_u_int_32(self):
        pass

    def set_timing_attribute_ex_u_int_64(self):
        pass

    def set_timing_attribute_int_32(self):
        pass

    def set_timing_attribute_string(self):
        pass

    def set_timing_attribute_timestamp(self):
        pass

    def set_timing_attribute_u_int_32(self):
        pass

    def set_timing_attribute_u_int_64(self):
        pass

    def set_trig_attribute_bool(self):
        pass

    def set_trig_attribute_double(self):
        pass

    def set_trig_attribute_double_array(self):
        pass

    def set_trig_attribute_int_32(self):
        pass

    def set_trig_attribute_int_32_array(self):
        pass

    def set_trig_attribute_string(self):
        pass

    def set_trig_attribute_timestamp(self):
        pass

    def set_trig_attribute_u_int_32(self):
        pass

    def set_watchdog_attribute_bool(self):
        pass

    def set_watchdog_attribute_double(self):
        pass

    def set_watchdog_attribute_int_32(self):
        pass

    def set_watchdog_attribute_string(self):
        pass

    def set_write_attribute_bool(self):
        pass

    def set_write_attribute_double(self):
        pass

    def set_write_attribute_int_32(self):
        pass

    def set_write_attribute_string(self):
        pass

    def set_write_attribute_u_int_32(self):
        pass

    def set_write_attribute_u_int_64(self):
        pass

    def start_new_file(self):
        pass

    def start_task(self):
        pass

    def stop_task(self):
        pass

    def task_control(self):
        pass

    def tristate_output_term(self, output_terminal):
        pass

    def unreserve_network_device(self):
        pass

    def wait_for_next_sample_clock(self):
        pass

    def wait_for_valid_timestamp(self):
        pass

    def wait_until_task_done(self):
        pass

    def write_analog_f_64(self):
        pass

    def write_analog_scalar_f_64(self):
        pass

    def write_binary_i_16(self):
        pass

    def write_binary_i_32(self):
        pass

    def write_binary_u_16(self):
        pass

    def write_binary_u_32(self):
        pass

    def write_ctr_freq(self):
        pass

    def write_ctr_freq_scalar(self):
        pass

    def write_ctr_ticks(self):
        pass

    def write_ctr_ticks_scalar(self):
        pass

    def write_ctr_time(self):
        pass

    def write_ctr_time_scalar(self):
        pass

    def write_digital_lines(self):
        pass

    def write_digital_scalar_u_32(self):
        pass

    def write_digital_u_16(self):
        pass

    def write_digital_u_32(self):
        pass

    def write_digital_u_8(self):
        pass

    def write_raw(self):
        pass

    def write_to_teds_from_array(
            self, physical_channel="", bit_stream=None,
            basic_teds_options=WriteBasicTEDSOptions.DO_NOT_WRITE):
        pass

    def write_to_teds_from_file(
            self, physical_channel="", file_path="",
            basic_teds_options=WriteBasicTEDSOptions.DO_NOT_WRITE):
        pass

