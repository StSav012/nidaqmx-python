<%
    from codegen.utilities.function_helpers import get_interpreter_functions,get_input_params,order_function_parameters_by_optional,get_interpreter_parameter_signature,get_return_value_for_func
    from codegen.utilities.text_wrappers import wrap, docstring_wrap
    functions = get_interpreter_functions(data)
%>\
# Do not edit this file; it was automatically generated.
import abc

class BaseInterpreter(abc.ABC):
    """
    Contains signature of functions for all DAQmx APIs.
    """
################################################################################
## Script function signature.
################################################################################
% for func in functions:
    %if func.is_python_factory:
    @staticmethod
%endif
<%
    params = get_input_params(func)
    sorted_params = order_function_parameters_by_optional(params)
    parameter_signature = get_interpreter_parameter_signature(is_python_factory, sorted_params)
    return_type = get_return_value_for_func(func)
    %>\
    @abc.abstractmethod
    %if (len(func.function_name) + len(parameter_signature)) > 68:
        %if return_type:
    def ${func.function_name}(
            ${parameter_signature + ')' | wrap(12, 12)} -> ${return_type}:
        %else:
    def ${func.function_name}(
            ${parameter_signature + '):' | wrap(12, 12)}
        %endif
    %else:
        %if return_type:
    def ${func.function_name}(${parameter_signature}) -> ${return_type}:
        %else:
    def ${func.function_name}(${parameter_signature}):
        %endif
    %endif
\
        raise NotImplementedError

% endfor